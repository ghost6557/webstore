generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model model_storage_price {
  msp_id  BigInt  @id @default(autoincrement())
  storage String? @db.VarChar
  price   BigInt?
  m_id    BigInt?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model phone_desc {
  pd_id        BigInt   @id @default(autoincrement())
  m_id         BigInt?
  desc         String?  @db.VarChar
  year         BigInt?
  display      String?  @db.VarChar
  resolution   String?  @db.VarChar
  processor    String?  @db.VarChar
  main_camera  String?  @db.VarChar
  front_camera String?  @db.VarChar
  battery      Decimal? @db.Decimal
  face_id      Boolean?
  os           String?  @db.VarChar
  img_url      String?  @db.VarChar
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model phone_models {
  m_id       BigInt  @id(map: "smartphone_models_pkey") @default(autoincrement())
  model_name String? @db.VarChar
  brand      String? @db.VarChar
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User_cart {
  uc_id        BigInt  @id(map: "user_cart_pkey") @default(autoincrement())
  user_id      String? @unique(map: "unique_user_id") @db.VarChar
  cart_details Json?   @db.Json
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model user_orders {
  id               BigInt  @id @default(autoincrement())
  delivery_address String? @db.VarChar
  apartment        BigInt?
  entrance         BigInt?
  floor            BigInt?
  comment          String? @db.VarChar
  order_content    Json?
  user_id          String? @db.VarChar
}
